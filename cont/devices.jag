<%
    include("../model/devicesQuery.jag");
    var log = new Log();
     log.info("hi");
    log.error("invoking devices.jag");
    var verb = request.getMethod();
    
    var userAgent= request.getHeader("User-Agent");
    var android = userAgent.indexOf("Android");
 
    var uriMatcher = new URIMatcher(request.getRequestURI());
    log.error(request.getRequestURI());
    	
	if(uriMatcher.match('/mdm/devices/register')) {
		log.error('hi');
	   	var regId = request.getParameter("regid");
	   	var properties = request.getParameter("properties");
	   	var email = request.getParameter("email");
	   	var osversion = request.getParameter("osversion");
	   	var vendor = request.getParameter("vendor");
	   	var platform = request.getParameter("platform");
	   	var deviceId = request.getParameter("deviceid");
	   	
	   	if(deviceId == null) {
	   		deviceId = "";
	   	}
	   	
	   	var state =  register(regId,properties,email,osversion,vendor,platform,deviceId);
	    if(state){
	    	response.status=201;
	    }else{
	        response.status=400;
	    }
	 }else if(uriMatcher.match('/mdm/devices/unregister')){
	   	var regId = request.getParameter("regid");
	   	var state =  unRegister(regId); 
	        if(state){
	            response.status=200;
	            print("unregistered");
	        }else{
	            response.status=404;
	            print("unregisterfail");
	        }
	 }else if(uriMatcher.match('/mdm/devices/isregistered')){
	    var regId = request.getParameter("regid");
	    var state = isRegistered(regId);	
	        if(state){
	            response.status = 200;
	            print("registered");
	        }else{
	            response.status = 404;
	            print("notregistered");
	        }
	 }else if(uriMatcher.match('/mdm/devices/{deviceid}/operations/{operation}')){
	   	var deviceId = uriMatcher.elements().deviceid;
        var operation = uriMatcher.elements().operation;
        var jsonString = request.getContent();
        var result = parse(jsonString);
        var strData = null;
        
        if(result!=null){
            var data = result.data;
            strData = stringify(data);
        }
         
        var state = null;
        
        if(android > 0){ 
            state = sendMessageToDevice(deviceId,operation,strData); 
        }else{
            state = sendMessageToIOSDevice(deviceId,operation,strData);
        }
            
        if(state){
            response.status=200;
        }else{
            response.status=400;
        }     
	 } else if(uriMatcher.match('/mdm/devices/{deviceid}/features')){
	 	log.info("hi");
	   	var deviceId = uriMatcher.elements().deviceid;
	   	var featureList = getFeaturesFromDevice(deviceId);
    	if(featureList[0]!=null){
            response.content = featureList;
            response.status=200;
        }else{
            response.status=404;
   	    } 
	 
	 } else if(uriMatcher.match('/mdm/devices/{deviceid}')) {
	 	var log = new Log();    
	   	var deviceId = uriMatcher.elements().deviceid;
		var magicToken = request.getParameter("magicToken");
		var token = request.getParameter("token");
		var unlockToken = request.getParameter("unlockToken");
		
    	if(updateiOSTokens(deviceId, magicToken, token, unlockToken)){
            response.status=200;
        }else{
            response.status=404;
   	    } 
	 }else if(uriMatcher.match('/mdm/pending/devices/{udid}/operations')){
        var UDID = uriMatcher.elements().udid;
        var featureCodeList = getPendingOperationsFromDevice(UDID);
        if(featureCodeList!= undefined && featureCodeList!= null && featureCodeList[0]!=null){
            response.content = featureCodeList;
            response.status=200;
        }else{
            response.status=404;
        }

    }
  %>
